<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category    design
 * @package     base_default
 * @copyright   Copyright (c) 2012 Magento Inc. (http://www.magentocommerce.com)
 * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */
?>
<?php
/**
 * Product list template
 *
 * @see Mage_Catalog_Block_Product_List
 */
?>
<?php
$_productCollection=$this->getLoadedProductCollection();
$_helper = $this->helper('catalog/output');
$_category  = Mage::registry('current_category');

?>
<?php if(!$_productCollection->count()): ?>
    <p class="note-msg"><?php echo $this->__('There are no products matching the selection.') ?></p>
<?php else: ?>
    <div class="category-products">
        <?php // Grid Mode ?>
        <?php $_collectionSize = $_productCollection->count() ?>
        <?php $_columnCount = $this->getColumnCount(); ?>
        <?php $i=0; foreach ($_productCollection as $_product): ?>
            <script type="text/javascript">
                var optionsPrice = new Product.OptionsPrice([]);
            </script>
            <?php Mage::register('gift_product', $_product); ?>
            <?php
            //get Add to Cart url for product with options
            $addUrlKey = Mage_Core_Controller_Front_Action::PARAM_NAME_URL_ENCODED;
            $addUrlValue = Mage::getUrl('*/*/*', array('_use_rewrite' => true, '_current' => true));
            $additional[$addUrlKey] = Mage::helper('core')->urlEncode($addUrlValue);
            $url = Mage::helper('checkout/cart')->getAddUrl($_product, $additional);
            ?>
            <?php if ($i++%$_columnCount==0): ?>
            <ul class="products-grid voucher-list">
            <?php endif ?>
            <li class="item<?php if(($i-1)%$_columnCount==0): ?> first<?php elseif($i%$_columnCount==0): ?> last<?php endif; ?> <?php echo strtolower($_product->getSku()) ?> <?php if($_collectionSize == 1): ?>center-list<?php endif; ?>">
<!--                <form id="product-addtocart---><?php //echo $_product->getId() ?><!--" action="--><?php //echo $this->getSubmitUrl($_product) ?><!--" method="post">-->
                <form action="<?php echo $url ?>" method="post" id="product_addtocart_form"<?php if ($_product->getOptions()): ?> enctype="multipart/form-data"<?php endif; ?>>
                    <div class="no-display">
                        <input type="hidden" name="product" value="<?php echo $_product->getId() ?>" />
                        <input type="hidden" name="related_product" id="related-products-field" value="" />
                    </div>
                    <?php echo $this->getChildHtml('giftcardProduct') ?>
                <div class="actions">
                    <?php if($_product->isSaleable()): ?>
                        <div class="order-box">
                            <label for="qty"><?php echo $this->__('Qty:') ?></label>
                            <input type="text" name="qty" id="qty" maxlength="12" value="1" title="<?php echo $this->__('Qty') ?>" class="input-text qty" />
                        </div>
<!--                        <button type="submit" title="--><?php //echo $this->__('Order Now') ?><!--" class="button btn-cart"><span><span>--><?php //echo $this->__('Order Now') ?><!--</span></span></button>-->
                        <button type="button" title="<?php echo $this->__('Order Now') ?>" class="button btn-cart" onclick="productAddToCartForm.submit(this)"><span><span><?php echo $this->__('Order Now') ?></span></span></button>

                        <!--                        <button type="button" title="--><?php //echo $this->__('Add to Order') ?><!--" class="button btn-cart" onclick="setLocation('--><?php //echo $this->getAddToCartUrl($_product) ?><!--')"><span><span>--><?php //echo $this->__('Add to Order') ?><!--</span></span></button>-->
                    <?php else: ?>
                        <p class="availability out-of-stock"><span><?php echo $this->__('Out of stock') ?></span></p>
                    <?php endif; ?>
                </div>
                </form>
            </li>
            <?php if ($i%$_columnCount==0 || $i==$_collectionSize): ?>
            </ul>
            <?php endif ?>
        <?php endforeach ?>
        <script type="text/javascript">decorateGeneric($$('ul.products-grid'), ['odd','even','first','last'])</script>
    </div>
<?php endif; ?>

<script type="text/javascript">
    //<![CDATA[
    var productAddToCartForm = new VarienForm('product_addtocart_form');
    productAddToCartForm.submit = function(button, url) {
        if (this.validator.validate()) {
            var form = this.form;
            var oldUrl = form.action;

            if (url) {
                form.action = url;
            }
            var e = null;
            try {
                this.form.submit();
            } catch (e) {
            }
            this.form.action = oldUrl;
            if (e) {
                throw e;
            }

            if (button && button != 'undefined') {
                button.disabled = true;
            }
        }
    }.bind(productAddToCartForm);

    productAddToCartForm.submitLight = function(button, url){
        if(this.validator) {
            var nv = Validation.methods;
            delete Validation.methods['required-entry'];
            delete Validation.methods['validate-one-required'];
            delete Validation.methods['validate-one-required-by-name'];
            if (this.validator.validate()) {
                if (url) {
                    this.form.action = url;
                }
                this.form.submit();
            }
            Object.extend(Validation.methods, nv);
        }
    }.bind(productAddToCartForm);
    //]]>
</script>
